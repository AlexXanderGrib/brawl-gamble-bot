{
	// Place your Рабочая область alesha-brawl-bot snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Service": {
		"scope": "javascript,typescript",
		"prefix": "srvc",
		"body": [
			"import { container } from \"src/config\";",
			"",
			"@container.ProvideClass()",
			"export class $1Service {",
			"  $2",
			"}"
		]
	},
	"Contoller": {
		"scope": "javascript,typescript",
		"prefix": "cntr",
		"body": [
			"import { container } from \"src/config\";",
			"import { BotController, Handle } from \"src/bot\";",
			"import { autoKeyboard } from \"@pres/views/auto.keyboard\";",
			"import type { ExtendedMessageContext } from \"src/context\";",
			"import { UseRouteCondition } from \"@pres/shared/use-route.condition\";",
			"import { AutoSkipCondition } from \"@pres/shared/auto-skip.condition\";",
			"import { emoji } from \"@xxhax/emoji\";",
			"import { $1Routes } from \"./$2.shared\"",
			"",
			"// TODO: Add this file to `@pres/index.ts`",
			"@container.ProvideClass()",
			"export class $1Controller extends BotController {",
			"  @Handle([AutoSkipCondition(), UseRouteCondition($1Routes.Menu)])",
			"  async menu(context: ExtendedMessageContext) {",
			"    ",
			"    $4",
			"    await context.reply(`${emoji.robot_face} Hello World!`, {  ",
			"      keyboard: autoKeyboard({ inline: context.supportsInlineKeyboard() })",
			"    })",
			"  }",
			"}"
		]
	},
	"Controller's Shared": {
		"scope": "javascript,typescript",
		"prefix": "cntrsh",
		"body": [
			"import { emoji } from \"@xxhax/emoji\";",
			"import { ButtonColor, ButtonColorUnion, Keyboard } from \"vk-io\";",
			"",
			"export const $1Routes = {",
			"  Menu: new Route({ command: \"$2:menu\", name: `${emoji.$3} $4` }) ",
			"}",
			"",
			"export function $1MenuButton({ color = Keyboard.SECONDARY_COLOR as ButtonColor | ButtonColorUnion } = {}) {",
			"  return $1Routes.Menu.toButton(color)",
			"}"
		]
	}
}